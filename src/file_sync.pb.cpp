// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_sync.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "file_sync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace file_sync {

namespace {

const ::google::protobuf::Descriptor* Round2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Round2_reflection_ = NULL;
const ::google::protobuf::Descriptor* strata_estimator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  strata_estimator_reflection_ = NULL;
const ::google::protobuf::Descriptor* IBLT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IBLT_reflection_ = NULL;
const ::google::protobuf::Descriptor* IBLT2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IBLT2_reflection_ = NULL;
const ::google::protobuf::Descriptor* IBLT_bucket_extended_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IBLT_bucket_extended_reflection_ = NULL;
const ::google::protobuf::Descriptor* IBLT_bucket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IBLT_bucket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_file_5fsync_2eproto() {
  protobuf_AddDesc_file_5fsync_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "file_sync.proto");
  GOOGLE_CHECK(file != NULL);
  Round2_descriptor_ = file->message_type(0);
  static const int Round2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round2, chunk_exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round2, new_chunk_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round2, existing_chunk_encoding_),
  };
  Round2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Round2_descriptor_,
      Round2::default_instance_,
      Round2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Round2));
  strata_estimator_descriptor_ = file->message_type(1);
  static const int strata_estimator_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strata_estimator, strata_),
  };
  strata_estimator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      strata_estimator_descriptor_,
      strata_estimator::default_instance_,
      strata_estimator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strata_estimator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strata_estimator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(strata_estimator));
  IBLT_descriptor_ = file->message_type(2);
  static const int IBLT_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT, buckets_),
  };
  IBLT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IBLT_descriptor_,
      IBLT::default_instance_,
      IBLT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IBLT));
  IBLT2_descriptor_ = file->message_type(3);
  static const int IBLT2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT2, key_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT2, hash_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT2, count_),
  };
  IBLT2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IBLT2_descriptor_,
      IBLT2::default_instance_,
      IBLT2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IBLT2));
  IBLT_bucket_extended_descriptor_ = file->message_type(4);
  static const int IBLT_bucket_extended_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT_bucket_extended, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT_bucket_extended, has_key_),
  };
  IBLT_bucket_extended_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IBLT_bucket_extended_descriptor_,
      IBLT_bucket_extended::default_instance_,
      IBLT_bucket_extended_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT_bucket_extended, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT_bucket_extended, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IBLT_bucket_extended));
  IBLT_bucket_descriptor_ = file->message_type(5);
  static const int IBLT_bucket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT_bucket, key_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT_bucket, hash_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT_bucket, count_),
  };
  IBLT_bucket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IBLT_bucket_descriptor_,
      IBLT_bucket::default_instance_,
      IBLT_bucket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT_bucket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IBLT_bucket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IBLT_bucket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_file_5fsync_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Round2_descriptor_, &Round2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    strata_estimator_descriptor_, &strata_estimator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IBLT_descriptor_, &IBLT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IBLT2_descriptor_, &IBLT2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IBLT_bucket_extended_descriptor_, &IBLT_bucket_extended::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IBLT_bucket_descriptor_, &IBLT_bucket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_file_5fsync_2eproto() {
  delete Round2::default_instance_;
  delete Round2_reflection_;
  delete strata_estimator::default_instance_;
  delete strata_estimator_reflection_;
  delete IBLT::default_instance_;
  delete IBLT_reflection_;
  delete IBLT2::default_instance_;
  delete IBLT2_reflection_;
  delete IBLT_bucket_extended::default_instance_;
  delete IBLT_bucket_extended_reflection_;
  delete IBLT_bucket::default_instance_;
  delete IBLT_bucket_reflection_;
}

void protobuf_AddDesc_file_5fsync_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017file_sync.proto\022\tfile_sync\"_\n\006Round2\022\030"
    "\n\014chunk_exists\030\001 \003(\010B\002\020\001\022\026\n\016new_chunk_in"
    "fo\030\003 \003(\014\022#\n\027existing_chunk_encoding\030\004 \003("
    "\rB\002\020\001\"4\n\020strata_estimator\022 \n\006strata\030\001 \003("
    "\0132\020.file_sync.IBLT2\"/\n\004IBLT\022\'\n\007buckets\030\001"
    " \003(\0132\026.file_sync.IBLT_bucket\"E\n\005IBLT2\022\023\n"
    "\007key_sum\030\001 \003(\004B\002\020\001\022\024\n\010hash_sum\030\002 \003(\004B\002\020\001"
    "\022\021\n\005count\030\003 \003(\004B\002\020\001\"S\n\024IBLT_bucket_exten"
    "ded\022&\n\006bucket\030\001 \002(\0132\026.file_sync.IBLT_buc"
    "ket\022\023\n\007has_key\030\002 \003(\010B\002\020\001\"\?\n\013IBLT_bucket\022"
    "\017\n\007key_sum\030\001 \002(\r\022\020\n\010hash_sum\030\002 \002(\r\022\r\n\005co"
    "unt\030\003 \002(\r", 449);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "file_sync.proto", &protobuf_RegisterTypes);
  Round2::default_instance_ = new Round2();
  strata_estimator::default_instance_ = new strata_estimator();
  IBLT::default_instance_ = new IBLT();
  IBLT2::default_instance_ = new IBLT2();
  IBLT_bucket_extended::default_instance_ = new IBLT_bucket_extended();
  IBLT_bucket::default_instance_ = new IBLT_bucket();
  Round2::default_instance_->InitAsDefaultInstance();
  strata_estimator::default_instance_->InitAsDefaultInstance();
  IBLT::default_instance_->InitAsDefaultInstance();
  IBLT2::default_instance_->InitAsDefaultInstance();
  IBLT_bucket_extended::default_instance_->InitAsDefaultInstance();
  IBLT_bucket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_file_5fsync_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_file_5fsync_2eproto {
  StaticDescriptorInitializer_file_5fsync_2eproto() {
    protobuf_AddDesc_file_5fsync_2eproto();
  }
} static_descriptor_initializer_file_5fsync_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Round2::kChunkExistsFieldNumber;
const int Round2::kNewChunkInfoFieldNumber;
const int Round2::kExistingChunkEncodingFieldNumber;
#endif  // !_MSC_VER

Round2::Round2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Round2::InitAsDefaultInstance() {
}

Round2::Round2(const Round2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Round2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Round2::~Round2() {
  SharedDtor();
}

void Round2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Round2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Round2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Round2_descriptor_;
}

const Round2& Round2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fsync_2eproto();
  return *default_instance_;
}

Round2* Round2::default_instance_ = NULL;

Round2* Round2::New() const {
  return new Round2;
}

void Round2::Clear() {
  chunk_exists_.Clear();
  new_chunk_info_.Clear();
  existing_chunk_encoding_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Round2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool chunk_exists = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_chunk_exists())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10, input, this->mutable_chunk_exists())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_chunk_info;
        break;
      }

      // repeated bytes new_chunk_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_chunk_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_new_chunk_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_chunk_info;
        if (input->ExpectTag(34)) goto parse_existing_chunk_encoding;
        break;
      }

      // repeated uint32 existing_chunk_encoding = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_existing_chunk_encoding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_existing_chunk_encoding())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_existing_chunk_encoding())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Round2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool chunk_exists = 1 [packed = true];
  if (this->chunk_exists_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chunk_exists_cached_byte_size_);
  }
  for (int i = 0; i < this->chunk_exists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->chunk_exists(i), output);
  }

  // repeated bytes new_chunk_info = 3;
  for (int i = 0; i < this->new_chunk_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->new_chunk_info(i), output);
  }

  // repeated uint32 existing_chunk_encoding = 4 [packed = true];
  if (this->existing_chunk_encoding_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_existing_chunk_encoding_cached_byte_size_);
  }
  for (int i = 0; i < this->existing_chunk_encoding_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->existing_chunk_encoding(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Round2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool chunk_exists = 1 [packed = true];
  if (this->chunk_exists_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chunk_exists_cached_byte_size_, target);
  }
  for (int i = 0; i < this->chunk_exists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->chunk_exists(i), target);
  }

  // repeated bytes new_chunk_info = 3;
  for (int i = 0; i < this->new_chunk_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->new_chunk_info(i), target);
  }

  // repeated uint32 existing_chunk_encoding = 4 [packed = true];
  if (this->existing_chunk_encoding_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _existing_chunk_encoding_cached_byte_size_, target);
  }
  for (int i = 0; i < this->existing_chunk_encoding_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->existing_chunk_encoding(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Round2::ByteSize() const {
  int total_size = 0;

  // repeated bool chunk_exists = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->chunk_exists_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chunk_exists_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes new_chunk_info = 3;
  total_size += 1 * this->new_chunk_info_size();
  for (int i = 0; i < this->new_chunk_info_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->new_chunk_info(i));
  }

  // repeated uint32 existing_chunk_encoding = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->existing_chunk_encoding_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->existing_chunk_encoding(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _existing_chunk_encoding_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Round2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Round2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Round2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Round2::MergeFrom(const Round2& from) {
  GOOGLE_CHECK_NE(&from, this);
  chunk_exists_.MergeFrom(from.chunk_exists_);
  new_chunk_info_.MergeFrom(from.new_chunk_info_);
  existing_chunk_encoding_.MergeFrom(from.existing_chunk_encoding_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Round2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round2::CopyFrom(const Round2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round2::IsInitialized() const {

  return true;
}

void Round2::Swap(Round2* other) {
  if (other != this) {
    chunk_exists_.Swap(&other->chunk_exists_);
    new_chunk_info_.Swap(&other->new_chunk_info_);
    existing_chunk_encoding_.Swap(&other->existing_chunk_encoding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Round2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Round2_descriptor_;
  metadata.reflection = Round2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int strata_estimator::kStrataFieldNumber;
#endif  // !_MSC_VER

strata_estimator::strata_estimator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void strata_estimator::InitAsDefaultInstance() {
}

strata_estimator::strata_estimator(const strata_estimator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void strata_estimator::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

strata_estimator::~strata_estimator() {
  SharedDtor();
}

void strata_estimator::SharedDtor() {
  if (this != default_instance_) {
  }
}

void strata_estimator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* strata_estimator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return strata_estimator_descriptor_;
}

const strata_estimator& strata_estimator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fsync_2eproto();
  return *default_instance_;
}

strata_estimator* strata_estimator::default_instance_ = NULL;

strata_estimator* strata_estimator::New() const {
  return new strata_estimator;
}

void strata_estimator::Clear() {
  strata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool strata_estimator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .file_sync.IBLT2 strata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_strata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void strata_estimator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .file_sync.IBLT2 strata = 1;
  for (int i = 0; i < this->strata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->strata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* strata_estimator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .file_sync.IBLT2 strata = 1;
  for (int i = 0; i < this->strata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->strata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int strata_estimator::ByteSize() const {
  int total_size = 0;

  // repeated .file_sync.IBLT2 strata = 1;
  total_size += 1 * this->strata_size();
  for (int i = 0; i < this->strata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void strata_estimator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const strata_estimator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const strata_estimator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void strata_estimator::MergeFrom(const strata_estimator& from) {
  GOOGLE_CHECK_NE(&from, this);
  strata_.MergeFrom(from.strata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void strata_estimator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strata_estimator::CopyFrom(const strata_estimator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strata_estimator::IsInitialized() const {

  return true;
}

void strata_estimator::Swap(strata_estimator* other) {
  if (other != this) {
    strata_.Swap(&other->strata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata strata_estimator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = strata_estimator_descriptor_;
  metadata.reflection = strata_estimator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IBLT::kBucketsFieldNumber;
#endif  // !_MSC_VER

IBLT::IBLT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IBLT::InitAsDefaultInstance() {
}

IBLT::IBLT(const IBLT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IBLT::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IBLT::~IBLT() {
  SharedDtor();
}

void IBLT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IBLT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IBLT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IBLT_descriptor_;
}

const IBLT& IBLT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fsync_2eproto();
  return *default_instance_;
}

IBLT* IBLT::default_instance_ = NULL;

IBLT* IBLT::New() const {
  return new IBLT;
}

void IBLT::Clear() {
  buckets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IBLT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .file_sync.IBLT_bucket buckets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buckets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buckets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buckets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IBLT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .file_sync.IBLT_bucket buckets = 1;
  for (int i = 0; i < this->buckets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buckets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IBLT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .file_sync.IBLT_bucket buckets = 1;
  for (int i = 0; i < this->buckets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buckets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IBLT::ByteSize() const {
  int total_size = 0;

  // repeated .file_sync.IBLT_bucket buckets = 1;
  total_size += 1 * this->buckets_size();
  for (int i = 0; i < this->buckets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buckets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IBLT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IBLT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IBLT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IBLT::MergeFrom(const IBLT& from) {
  GOOGLE_CHECK_NE(&from, this);
  buckets_.MergeFrom(from.buckets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IBLT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IBLT::CopyFrom(const IBLT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IBLT::IsInitialized() const {

  for (int i = 0; i < buckets_size(); i++) {
    if (!this->buckets(i).IsInitialized()) return false;
  }
  return true;
}

void IBLT::Swap(IBLT* other) {
  if (other != this) {
    buckets_.Swap(&other->buckets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IBLT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IBLT_descriptor_;
  metadata.reflection = IBLT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IBLT2::kKeySumFieldNumber;
const int IBLT2::kHashSumFieldNumber;
const int IBLT2::kCountFieldNumber;
#endif  // !_MSC_VER

IBLT2::IBLT2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IBLT2::InitAsDefaultInstance() {
}

IBLT2::IBLT2(const IBLT2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IBLT2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IBLT2::~IBLT2() {
  SharedDtor();
}

void IBLT2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IBLT2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IBLT2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IBLT2_descriptor_;
}

const IBLT2& IBLT2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fsync_2eproto();
  return *default_instance_;
}

IBLT2* IBLT2::default_instance_ = NULL;

IBLT2* IBLT2::New() const {
  return new IBLT2;
}

void IBLT2::Clear() {
  key_sum_.Clear();
  hash_sum_.Clear();
  count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IBLT2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 key_sum = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_key_sum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_key_sum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hash_sum;
        break;
      }

      // repeated uint64 hash_sum = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_hash_sum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18, input, this->mutable_hash_sum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_count;
        break;
      }

      // repeated uint64 count = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26, input, this->mutable_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IBLT2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 key_sum = 1 [packed = true];
  if (this->key_sum_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_key_sum_cached_byte_size_);
  }
  for (int i = 0; i < this->key_sum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->key_sum(i), output);
  }

  // repeated uint64 hash_sum = 2 [packed = true];
  if (this->hash_sum_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hash_sum_cached_byte_size_);
  }
  for (int i = 0; i < this->hash_sum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->hash_sum(i), output);
  }

  // repeated uint64 count = 3 [packed = true];
  if (this->count_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_count_cached_byte_size_);
  }
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IBLT2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 key_sum = 1 [packed = true];
  if (this->key_sum_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _key_sum_cached_byte_size_, target);
  }
  for (int i = 0; i < this->key_sum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->key_sum(i), target);
  }

  // repeated uint64 hash_sum = 2 [packed = true];
  if (this->hash_sum_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _hash_sum_cached_byte_size_, target);
  }
  for (int i = 0; i < this->hash_sum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->hash_sum(i), target);
  }

  // repeated uint64 count = 3 [packed = true];
  if (this->count_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _count_cached_byte_size_, target);
  }
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IBLT2::ByteSize() const {
  int total_size = 0;

  // repeated uint64 key_sum = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->key_sum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->key_sum(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _key_sum_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 hash_sum = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->hash_sum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->hash_sum(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hash_sum_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 count = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->count(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _count_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IBLT2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IBLT2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IBLT2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IBLT2::MergeFrom(const IBLT2& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_sum_.MergeFrom(from.key_sum_);
  hash_sum_.MergeFrom(from.hash_sum_);
  count_.MergeFrom(from.count_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IBLT2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IBLT2::CopyFrom(const IBLT2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IBLT2::IsInitialized() const {

  return true;
}

void IBLT2::Swap(IBLT2* other) {
  if (other != this) {
    key_sum_.Swap(&other->key_sum_);
    hash_sum_.Swap(&other->hash_sum_);
    count_.Swap(&other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IBLT2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IBLT2_descriptor_;
  metadata.reflection = IBLT2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IBLT_bucket_extended::kBucketFieldNumber;
const int IBLT_bucket_extended::kHasKeyFieldNumber;
#endif  // !_MSC_VER

IBLT_bucket_extended::IBLT_bucket_extended()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IBLT_bucket_extended::InitAsDefaultInstance() {
  bucket_ = const_cast< ::file_sync::IBLT_bucket*>(&::file_sync::IBLT_bucket::default_instance());
}

IBLT_bucket_extended::IBLT_bucket_extended(const IBLT_bucket_extended& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IBLT_bucket_extended::SharedCtor() {
  _cached_size_ = 0;
  bucket_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IBLT_bucket_extended::~IBLT_bucket_extended() {
  SharedDtor();
}

void IBLT_bucket_extended::SharedDtor() {
  if (this != default_instance_) {
    delete bucket_;
  }
}

void IBLT_bucket_extended::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IBLT_bucket_extended::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IBLT_bucket_extended_descriptor_;
}

const IBLT_bucket_extended& IBLT_bucket_extended::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fsync_2eproto();
  return *default_instance_;
}

IBLT_bucket_extended* IBLT_bucket_extended::default_instance_ = NULL;

IBLT_bucket_extended* IBLT_bucket_extended::New() const {
  return new IBLT_bucket_extended;
}

void IBLT_bucket_extended::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bucket()) {
      if (bucket_ != NULL) bucket_->::file_sync::IBLT_bucket::Clear();
    }
  }
  has_key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IBLT_bucket_extended::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .file_sync.IBLT_bucket bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_has_key;
        break;
      }

      // repeated bool has_key = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_has_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_has_key())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 18, input, this->mutable_has_key())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IBLT_bucket_extended::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .file_sync.IBLT_bucket bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bucket(), output);
  }

  // repeated bool has_key = 2 [packed = true];
  if (this->has_key_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_has_key_cached_byte_size_);
  }
  for (int i = 0; i < this->has_key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->has_key(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IBLT_bucket_extended::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .file_sync.IBLT_bucket bucket = 1;
  if (has_bucket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bucket(), target);
  }

  // repeated bool has_key = 2 [packed = true];
  if (this->has_key_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _has_key_cached_byte_size_, target);
  }
  for (int i = 0; i < this->has_key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->has_key(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IBLT_bucket_extended::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .file_sync.IBLT_bucket bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bucket());
    }

  }
  // repeated bool has_key = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->has_key_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _has_key_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IBLT_bucket_extended::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IBLT_bucket_extended* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IBLT_bucket_extended*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IBLT_bucket_extended::MergeFrom(const IBLT_bucket_extended& from) {
  GOOGLE_CHECK_NE(&from, this);
  has_key_.MergeFrom(from.has_key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      mutable_bucket()->::file_sync::IBLT_bucket::MergeFrom(from.bucket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IBLT_bucket_extended::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IBLT_bucket_extended::CopyFrom(const IBLT_bucket_extended& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IBLT_bucket_extended::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_bucket()) {
    if (!this->bucket().IsInitialized()) return false;
  }
  return true;
}

void IBLT_bucket_extended::Swap(IBLT_bucket_extended* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    has_key_.Swap(&other->has_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IBLT_bucket_extended::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IBLT_bucket_extended_descriptor_;
  metadata.reflection = IBLT_bucket_extended_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IBLT_bucket::kKeySumFieldNumber;
const int IBLT_bucket::kHashSumFieldNumber;
const int IBLT_bucket::kCountFieldNumber;
#endif  // !_MSC_VER

IBLT_bucket::IBLT_bucket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IBLT_bucket::InitAsDefaultInstance() {
}

IBLT_bucket::IBLT_bucket(const IBLT_bucket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IBLT_bucket::SharedCtor() {
  _cached_size_ = 0;
  key_sum_ = 0u;
  hash_sum_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IBLT_bucket::~IBLT_bucket() {
  SharedDtor();
}

void IBLT_bucket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IBLT_bucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IBLT_bucket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IBLT_bucket_descriptor_;
}

const IBLT_bucket& IBLT_bucket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fsync_2eproto();
  return *default_instance_;
}

IBLT_bucket* IBLT_bucket::default_instance_ = NULL;

IBLT_bucket* IBLT_bucket::New() const {
  return new IBLT_bucket;
}

void IBLT_bucket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_sum_ = 0u;
    hash_sum_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IBLT_bucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key_sum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_sum_)));
          set_has_key_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hash_sum;
        break;
      }

      // required uint32 hash_sum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hash_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_sum_)));
          set_has_hash_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IBLT_bucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 key_sum = 1;
  if (has_key_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key_sum(), output);
  }

  // required uint32 hash_sum = 2;
  if (has_hash_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hash_sum(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IBLT_bucket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 key_sum = 1;
  if (has_key_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key_sum(), target);
  }

  // required uint32 hash_sum = 2;
  if (has_hash_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hash_sum(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IBLT_bucket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 key_sum = 1;
    if (has_key_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_sum());
    }

    // required uint32 hash_sum = 2;
    if (has_hash_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hash_sum());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IBLT_bucket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IBLT_bucket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IBLT_bucket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IBLT_bucket::MergeFrom(const IBLT_bucket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_sum()) {
      set_key_sum(from.key_sum());
    }
    if (from.has_hash_sum()) {
      set_hash_sum(from.hash_sum());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IBLT_bucket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IBLT_bucket::CopyFrom(const IBLT_bucket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IBLT_bucket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IBLT_bucket::Swap(IBLT_bucket* other) {
  if (other != this) {
    std::swap(key_sum_, other->key_sum_);
    std::swap(hash_sum_, other->hash_sum_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IBLT_bucket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IBLT_bucket_descriptor_;
  metadata.reflection = IBLT_bucket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace file_sync

// @@protoc_insertion_point(global_scope)
