// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_sync.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "file_sync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace file_sync {

namespace {

const ::google::protobuf::Descriptor* Round2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Round2_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_file_5fsync_2eproto() {
  protobuf_AddDesc_file_5fsync_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "file_sync.proto");
  GOOGLE_CHECK(file != NULL);
  Round2_descriptor_ = file->message_type(0);
  static const int Round2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round2, chunk_exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round2, new_chunk_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round2, existing_chunk_encoding_),
  };
  Round2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Round2_descriptor_,
      Round2::default_instance_,
      Round2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Round2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Round2));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_file_5fsync_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Round2_descriptor_, &Round2::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_file_5fsync_2eproto() {
  delete Round2::default_instance_;
  delete Round2_reflection_;
}

void protobuf_AddDesc_file_5fsync_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017file_sync.proto\022\tfile_sync\"_\n\006Round2\022\030"
    "\n\014chunk_exists\030\001 \003(\010B\002\020\001\022\026\n\016new_chunk_in"
    "fo\030\003 \003(\t\022#\n\027existing_chunk_encoding\030\004 \003("
    "\rB\002\020\001", 125);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "file_sync.proto", &protobuf_RegisterTypes);
  Round2::default_instance_ = new Round2();
  Round2::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_file_5fsync_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_file_5fsync_2eproto {
  StaticDescriptorInitializer_file_5fsync_2eproto() {
    protobuf_AddDesc_file_5fsync_2eproto();
  }
} static_descriptor_initializer_file_5fsync_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Round2::kChunkExistsFieldNumber;
const int Round2::kNewChunkInfoFieldNumber;
const int Round2::kExistingChunkEncodingFieldNumber;
#endif  // !_MSC_VER

Round2::Round2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:file_sync.Round2)
}

void Round2::InitAsDefaultInstance() {
}

Round2::Round2(const Round2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:file_sync.Round2)
}

void Round2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Round2::~Round2() {
  // @@protoc_insertion_point(destructor:file_sync.Round2)
  SharedDtor();
}

void Round2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Round2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Round2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Round2_descriptor_;
}

const Round2& Round2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fsync_2eproto();
  return *default_instance_;
}

Round2* Round2::default_instance_ = NULL;

Round2* Round2::New() const {
  return new Round2;
}

void Round2::Clear() {
  chunk_exists_.Clear();
  new_chunk_info_.Clear();
  existing_chunk_encoding_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Round2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:file_sync.Round2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool chunk_exists = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_chunk_exists())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10, input, this->mutable_chunk_exists())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_new_chunk_info;
        break;
      }

      // repeated string new_chunk_info = 3;
      case 3: {
        if (tag == 26) {
         parse_new_chunk_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_new_chunk_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_chunk_info(this->new_chunk_info_size() - 1).data(),
            this->new_chunk_info(this->new_chunk_info_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "new_chunk_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_new_chunk_info;
        if (input->ExpectTag(34)) goto parse_existing_chunk_encoding;
        break;
      }

      // repeated uint32 existing_chunk_encoding = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_existing_chunk_encoding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_existing_chunk_encoding())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_existing_chunk_encoding())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:file_sync.Round2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:file_sync.Round2)
  return false;
#undef DO_
}

void Round2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:file_sync.Round2)
  // repeated bool chunk_exists = 1 [packed = true];
  if (this->chunk_exists_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chunk_exists_cached_byte_size_);
  }
  for (int i = 0; i < this->chunk_exists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->chunk_exists(i), output);
  }

  // repeated string new_chunk_info = 3;
  for (int i = 0; i < this->new_chunk_info_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->new_chunk_info(i).data(), this->new_chunk_info(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "new_chunk_info");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_chunk_info(i), output);
  }

  // repeated uint32 existing_chunk_encoding = 4 [packed = true];
  if (this->existing_chunk_encoding_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_existing_chunk_encoding_cached_byte_size_);
  }
  for (int i = 0; i < this->existing_chunk_encoding_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->existing_chunk_encoding(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:file_sync.Round2)
}

::google::protobuf::uint8* Round2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:file_sync.Round2)
  // repeated bool chunk_exists = 1 [packed = true];
  if (this->chunk_exists_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chunk_exists_cached_byte_size_, target);
  }
  for (int i = 0; i < this->chunk_exists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->chunk_exists(i), target);
  }

  // repeated string new_chunk_info = 3;
  for (int i = 0; i < this->new_chunk_info_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_chunk_info(i).data(), this->new_chunk_info(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "new_chunk_info");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->new_chunk_info(i), target);
  }

  // repeated uint32 existing_chunk_encoding = 4 [packed = true];
  if (this->existing_chunk_encoding_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _existing_chunk_encoding_cached_byte_size_, target);
  }
  for (int i = 0; i < this->existing_chunk_encoding_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->existing_chunk_encoding(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:file_sync.Round2)
  return target;
}

int Round2::ByteSize() const {
  int total_size = 0;

  // repeated bool chunk_exists = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->chunk_exists_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chunk_exists_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string new_chunk_info = 3;
  total_size += 1 * this->new_chunk_info_size();
  for (int i = 0; i < this->new_chunk_info_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->new_chunk_info(i));
  }

  // repeated uint32 existing_chunk_encoding = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->existing_chunk_encoding_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->existing_chunk_encoding(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _existing_chunk_encoding_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Round2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Round2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Round2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Round2::MergeFrom(const Round2& from) {
  GOOGLE_CHECK_NE(&from, this);
  chunk_exists_.MergeFrom(from.chunk_exists_);
  new_chunk_info_.MergeFrom(from.new_chunk_info_);
  existing_chunk_encoding_.MergeFrom(from.existing_chunk_encoding_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Round2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Round2::CopyFrom(const Round2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round2::IsInitialized() const {

  return true;
}

void Round2::Swap(Round2* other) {
  if (other != this) {
    chunk_exists_.Swap(&other->chunk_exists_);
    new_chunk_info_.Swap(&other->new_chunk_info_);
    existing_chunk_encoding_.Swap(&other->existing_chunk_encoding_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Round2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Round2_descriptor_;
  metadata.reflection = Round2_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace file_sync

// @@protoc_insertion_point(global_scope)
