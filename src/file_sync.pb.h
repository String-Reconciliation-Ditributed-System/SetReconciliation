// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_sync.proto

#ifndef PROTOBUF_file_5fsync_2eproto__INCLUDED
#define PROTOBUF_file_5fsync_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace file_sync {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_file_5fsync_2eproto();
void protobuf_AssignDesc_file_5fsync_2eproto();
void protobuf_ShutdownFile_file_5fsync_2eproto();

class Round2;

// ===================================================================

class Round2 : public ::google::protobuf::Message {
 public:
  Round2();
  virtual ~Round2();

  Round2(const Round2& from);

  inline Round2& operator=(const Round2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Round2& default_instance();

  void Swap(Round2* other);

  // implements Message ----------------------------------------------

  Round2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Round2& from);
  void MergeFrom(const Round2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool chunk_exists = 1 [packed = true];
  inline int chunk_exists_size() const;
  inline void clear_chunk_exists();
  static const int kChunkExistsFieldNumber = 1;
  inline bool chunk_exists(int index) const;
  inline void set_chunk_exists(int index, bool value);
  inline void add_chunk_exists(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      chunk_exists() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_chunk_exists();

  // repeated string new_chunk_info = 3;
  inline int new_chunk_info_size() const;
  inline void clear_new_chunk_info();
  static const int kNewChunkInfoFieldNumber = 3;
  inline const ::std::string& new_chunk_info(int index) const;
  inline ::std::string* mutable_new_chunk_info(int index);
  inline void set_new_chunk_info(int index, const ::std::string& value);
  inline void set_new_chunk_info(int index, const char* value);
  inline void set_new_chunk_info(int index, const char* value, size_t size);
  inline ::std::string* add_new_chunk_info();
  inline void add_new_chunk_info(const ::std::string& value);
  inline void add_new_chunk_info(const char* value);
  inline void add_new_chunk_info(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& new_chunk_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_new_chunk_info();

  // repeated uint32 existing_chunk_encoding = 4 [packed = true];
  inline int existing_chunk_encoding_size() const;
  inline void clear_existing_chunk_encoding();
  static const int kExistingChunkEncodingFieldNumber = 4;
  inline ::google::protobuf::uint32 existing_chunk_encoding(int index) const;
  inline void set_existing_chunk_encoding(int index, ::google::protobuf::uint32 value);
  inline void add_existing_chunk_encoding(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      existing_chunk_encoding() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_existing_chunk_encoding();

  // @@protoc_insertion_point(class_scope:file_sync.Round2)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< bool > chunk_exists_;
  mutable int _chunk_exists_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> new_chunk_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > existing_chunk_encoding_;
  mutable int _existing_chunk_encoding_cached_byte_size_;
  friend void  protobuf_AddDesc_file_5fsync_2eproto();
  friend void protobuf_AssignDesc_file_5fsync_2eproto();
  friend void protobuf_ShutdownFile_file_5fsync_2eproto();

  void InitAsDefaultInstance();
  static Round2* default_instance_;
};
// ===================================================================


// ===================================================================

// Round2

// repeated bool chunk_exists = 1 [packed = true];
inline int Round2::chunk_exists_size() const {
  return chunk_exists_.size();
}
inline void Round2::clear_chunk_exists() {
  chunk_exists_.Clear();
}
inline bool Round2::chunk_exists(int index) const {
  // @@protoc_insertion_point(field_get:file_sync.Round2.chunk_exists)
  return chunk_exists_.Get(index);
}
inline void Round2::set_chunk_exists(int index, bool value) {
  chunk_exists_.Set(index, value);
  // @@protoc_insertion_point(field_set:file_sync.Round2.chunk_exists)
}
inline void Round2::add_chunk_exists(bool value) {
  chunk_exists_.Add(value);
  // @@protoc_insertion_point(field_add:file_sync.Round2.chunk_exists)
}
inline const ::google::protobuf::RepeatedField< bool >&
Round2::chunk_exists() const {
  // @@protoc_insertion_point(field_list:file_sync.Round2.chunk_exists)
  return chunk_exists_;
}
inline ::google::protobuf::RepeatedField< bool >*
Round2::mutable_chunk_exists() {
  // @@protoc_insertion_point(field_mutable_list:file_sync.Round2.chunk_exists)
  return &chunk_exists_;
}

// repeated string new_chunk_info = 3;
inline int Round2::new_chunk_info_size() const {
  return new_chunk_info_.size();
}
inline void Round2::clear_new_chunk_info() {
  new_chunk_info_.Clear();
}
inline const ::std::string& Round2::new_chunk_info(int index) const {
  // @@protoc_insertion_point(field_get:file_sync.Round2.new_chunk_info)
  return new_chunk_info_.Get(index);
}
inline ::std::string* Round2::mutable_new_chunk_info(int index) {
  // @@protoc_insertion_point(field_mutable:file_sync.Round2.new_chunk_info)
  return new_chunk_info_.Mutable(index);
}
inline void Round2::set_new_chunk_info(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:file_sync.Round2.new_chunk_info)
  new_chunk_info_.Mutable(index)->assign(value);
}
inline void Round2::set_new_chunk_info(int index, const char* value) {
  new_chunk_info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:file_sync.Round2.new_chunk_info)
}
inline void Round2::set_new_chunk_info(int index, const char* value, size_t size) {
  new_chunk_info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:file_sync.Round2.new_chunk_info)
}
inline ::std::string* Round2::add_new_chunk_info() {
  return new_chunk_info_.Add();
}
inline void Round2::add_new_chunk_info(const ::std::string& value) {
  new_chunk_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:file_sync.Round2.new_chunk_info)
}
inline void Round2::add_new_chunk_info(const char* value) {
  new_chunk_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:file_sync.Round2.new_chunk_info)
}
inline void Round2::add_new_chunk_info(const char* value, size_t size) {
  new_chunk_info_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:file_sync.Round2.new_chunk_info)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Round2::new_chunk_info() const {
  // @@protoc_insertion_point(field_list:file_sync.Round2.new_chunk_info)
  return new_chunk_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Round2::mutable_new_chunk_info() {
  // @@protoc_insertion_point(field_mutable_list:file_sync.Round2.new_chunk_info)
  return &new_chunk_info_;
}

// repeated uint32 existing_chunk_encoding = 4 [packed = true];
inline int Round2::existing_chunk_encoding_size() const {
  return existing_chunk_encoding_.size();
}
inline void Round2::clear_existing_chunk_encoding() {
  existing_chunk_encoding_.Clear();
}
inline ::google::protobuf::uint32 Round2::existing_chunk_encoding(int index) const {
  // @@protoc_insertion_point(field_get:file_sync.Round2.existing_chunk_encoding)
  return existing_chunk_encoding_.Get(index);
}
inline void Round2::set_existing_chunk_encoding(int index, ::google::protobuf::uint32 value) {
  existing_chunk_encoding_.Set(index, value);
  // @@protoc_insertion_point(field_set:file_sync.Round2.existing_chunk_encoding)
}
inline void Round2::add_existing_chunk_encoding(::google::protobuf::uint32 value) {
  existing_chunk_encoding_.Add(value);
  // @@protoc_insertion_point(field_add:file_sync.Round2.existing_chunk_encoding)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Round2::existing_chunk_encoding() const {
  // @@protoc_insertion_point(field_list:file_sync.Round2.existing_chunk_encoding)
  return existing_chunk_encoding_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Round2::mutable_existing_chunk_encoding() {
  // @@protoc_insertion_point(field_mutable_list:file_sync.Round2.existing_chunk_encoding)
  return &existing_chunk_encoding_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace file_sync

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_file_5fsync_2eproto__INCLUDED
